<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="20.11.2.0">
<procedure name="main">
<interface/>
<body>
<c></c>
<l>Image:=ImagePart</l>
<c></c>
<l>var_threshold (Image, Region, 100, 100, 0.2, 20, 'dark')</l>
<l>erosion_circle (Region, RegionErosion, 3)</l>
<l>connection (RegionErosion, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 6000, 99999)</l>
<l>region_features (SelectedRegions, 'area', Value)</l>
<l>union2 (SelectedRegions, SelectedRegions, RegionUnion)</l>
<l>paint_region (RegionUnion, Image, ImageResult, 0, 'fill')</l>
<l>threshold (ImageResult, Region1, 1, 255)</l>
<l>paint_region (Region1, ImageResult, ImageFiltered, 255, 'fill')</l>
<l>dev_display (ImageFiltered)</l>
<l>status:='OK'</l>
<l>stop ()</l>
<l>AAA:=0</l>
<c>*check height</c>
<l>if (status='OK')</l>
<l>    threshold (ImageFiltered, Region5, 0, 0)</l>
<l>    connection (Region5, ConnectedRegions2)</l>
<l>    count_obj (ConnectedRegions2, Number1)</l>
<c>    </c>
<l>    select_shape (ConnectedRegions2, SelectedRegions1, 'height', 'and', MinHeight, MaxHeight)</l>
<l>    region_features (SelectedRegions1, 'height', Value3)</l>
<l>    if (|Value3|!=1or Number1&gt;1)</l>
<l>        status:='NG'</l>
<l>        out_region:=ConnectedRegions2</l>
<c>        </c>
<l>        stop ()</l>
<l>    endif</l>
<l>endif</l>
<c></c>
<c>*check number slick</c>
<l>if (status='OK')</l>
<l>    ImagePart:=ImageFiltered</l>
<l>    threshold (ImagePart, Region4, 255, 255)</l>
<l>    connection (Region4, ConnectedRegions1)</l>
<l>    count_obj (ConnectedRegions1, Number)</l>
<l>    region_features (Region4, 'area', Value2)</l>
<l>    if (|Value2|!=1 or Number&gt;1)</l>
<l>        status:='NG'</l>
<l>        out_region:=ConnectedRegions1</l>
<l>        stop ()</l>
<l>    endif</l>
<l>endif</l>
<c></c>
<c>*check angle</c>
<l>if (status='OK')</l>
<l>    segment_image:=3</l>
<l>        ImagePart:=ImageFiltered</l>
<c></c>
<l>    get_image_size (ImagePart, Width, Height)</l>
<l>    threshold (ImagePart, Region2, 0, 0)</l>
<l>    region_features (Region2, 'height', Height_region)</l>
<l>    R:=[]</l>
<c>    </c>
<l>    if (|Height_region|=1)</l>
<c>        </c>
<l>        for Index1 := 1 to segment_image by 1</l>
<c>            </c>
<l>            crop_rectangle1 (ImagePart, ImagePart1, (Height_region/segment_image)*(Index1-1),0, (Height_region/segment_image)*Index1, Width)</l>
<l>            threshold (ImagePart1, Region3, 0, 0)</l>
<l>            smallest_rectangle2 (Region3, Row, Column, Phi, Length1, Length2)</l>
<l>            gen_rectangle2 (Rectangle, Row, Column, Phi, Length1, Length2)</l>
<l>            R[Index1-1]:=abs(deg(Phi))</l>
<c>            </c>
<l>        endfor</l>
<c>        </c>
<l>        result:=max(R)-min(R)</l>
<c>        </c>
<l>        if (result&gt;=MinDegree)</l>
<l>            status:='NG'</l>
<l>            out_region:=Region2</l>
<l>            stop ()</l>
<l>        endif</l>
<c>        </c>
<l>    endif</l>
<l>endif</l>
<c></c>
<c></c>
<c>*check head</c>
<l>if (status='OK')</l>
<l>        ImagePart:=ImageFiltered</l>
<c></c>
<l>    get_image_size (ImagePart, Width2, Height2)</l>
<c>    * Measure 01: Code generated by Measure 01</c>
<c>    * Measure 01: Prepare measurement</c>
<l>    AmplitudeThreshold := 60</l>
<l>    RoiWidthLen2 := 24.5</l>
<l>    set_system ('int_zooming', 'true')</l>
<c>    * Measure 01: Coordinates for line Measure 01 [0]</c>
<l>    rowstart := 1</l>
<l>    columnstart := 0</l>
<l>    rowend := 1</l>
<l>    columnend := Width2</l>
<l>    Round := Height2</l>
<l>    feq:=1</l>
<l>    MIN:= MinMeasureUpside</l>
<c>    </c>
<l>    MAX:=MaxMeasureUpside</l>
<c>    * Measure 01: Convert coordinates to rectangle2 type</c>
<c>    </c>
<l>    create_dict (DictHandle)</l>
<c>    </c>
<l>    for Index3 := 0 to Round by 1</l>
<l>        rowstart := 1+(feq*(Index3))</l>
<l>        rowend := 1+(feq*(Index3))</l>
<c>        </c>
<c>        </c>
<l>        TmpCtrl_Row := 0.5*(rowstart+rowend)</l>
<l>        TmpCtrl_Column := 0.5*(columnstart+columnend)</l>
<l>        TmpCtrl_Dr := rowstart-rowend</l>
<l>        TmpCtrl_Dc := columnend-columnstart</l>
<l>        TmpCtrl_Phi := atan2(TmpCtrl_Dr, TmpCtrl_Dc)</l>
<l>        TmpCtrl_Len1 := 0.5*sqrt(TmpCtrl_Dr*TmpCtrl_Dr + TmpCtrl_Dc*TmpCtrl_Dc)</l>
<l>        TmpCtrl_Len2 := RoiWidthLen2</l>
<l>        gen_measure_rectangle2 (TmpCtrl_Row, TmpCtrl_Column, TmpCtrl_Phi, TmpCtrl_Len1, TmpCtrl_Len2, Width2, Height2, 'nearest_neighbor', MsrHandle_Measure_01_0)  </l>
<l>        set_dict_tuple (DictHandle, Index3, MsrHandle_Measure_01_0)</l>
<l>    endfor</l>
<l>    width:=[]</l>
<l>    for Index4 := 0 to Round by 1</l>
<l>        try</l>
<l>            get_dict_tuple (DictHandle, Index4, Tuple)</l>
<l>            measure_pairs (ImagePart, Tuple, 1, AmplitudeThreshold, 'all', 'all', Row1_Measure_01_0, Column1_Measure_01_0, Amplitude1_Measure_01_0, Row2_Measure_01_0, Column2_Measure_01_0, Amplitude2_Measure_01_0, Width_Measure_01_0, Distance_Measure_01_0)</l>
<l>            if (Width_Measure_01_0 &gt;=MIN and Width_Measure_01_0&lt;= MAX)</l>
<c>                </c>
<l>                gen_region_points (Region, Row1_Measure_01_0, Column1_Measure_01_0)</l>
<l>                gen_region_points (Region1, Row2_Measure_01_0, Column2_Measure_01_0)</l>
<c>                </c>
<l>                paint_region (Region, ImagePart, ImagePart, 120, 'fill')</l>
<l>                paint_region (Region1, ImagePart, ImagePart, 120, 'fill')</l>
<c>                </c>
<l>            endif</l>
<c>            </c>
<l>            width[Index4]:=Width_Measure_01_0</l>
<l>        catch (Exception)</l>
<l>        endtry</l>
<l>    endfor</l>
<l>*     stop ()</l>
<c>    </c>
<l>    threshold (ImagePart, Region2, 120, 120)</l>
<l>    dilation_circle (Region2, RegionDilation, 5)</l>
<l>    select_shape (RegionDilation, SelectedRegion,  ['area','height'], 'and', [500,100], [120000,99999999])</l>
<l>    region_features (SelectedRegion, 'area', Value1)</l>
<l>    if (|Value1|&gt;0)</l>
<l>        status:='NG'</l>
<l>        out_region:=SelectedRegion</l>
<l>        stop ()</l>
<l>    endif</l>
<c>    </c>
<l>endif</l>
<c></c>
<c>*final</c>
<l>if (status='NG')</l>
<l>    paint_region (out_region, ImageFiltered, ImageFiltered, 0, 'fill')</l>
<l>else</l>
<l>        paint_region (ImageFiltered, ImageFiltered, ImageFiltered, 255, 'fill')</l>
<c></c>
<l>endif</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
